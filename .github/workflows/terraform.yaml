name: Terraform CI/CD

on:
  #push:
  #  branches:
  #    - main
  #pull_request:
  #  branches:
  #    - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    # Define environment specific settings
    env:
      TF_VAR_project_id: ${{ secrets.TF_VAR_PROJECT_ID }}
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      GCS_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
      TF_ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure Google Cloud credentials
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Copy environment-specific variables
        run: |
          cp environments/$TF_ENVIRONMENT/terraform.tfvars terraform/

      - name: Terraform Format Check
        id: fmt
        run: |
          cd terraform
          terraform fmt -check -recursive

      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init -backend-config="bucket=$GCS_BUCKET"

      - name: Terraform Validate
        id: validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          cd terraform
          terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          cd terraform
          terraform apply -auto-approve -input=false

      - name: Manual Approval for Production
        uses: trstringer/manual-approval@v1
        if: env.TF_ENVIRONMENT == 'prod' && github.event_name == 'workflow_dispatch'
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: your-github-username
          minimum-approvals: 1
          issue-title: "Deploying to Production"
          issue-body: "Please approve to proceed with the production deployment"
          timeout-minutes: 60

      - name: Terraform Apply to Production
        if: env.TF_ENVIRONMENT == 'prod' && github.event_name == 'workflow_dispatch'
        run: |
          cd terraform
          terraform apply -auto-approve -input=false
