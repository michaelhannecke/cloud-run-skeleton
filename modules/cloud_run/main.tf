/**
 * Cloud Run module for deploying containerized applications
 * with secure configuration and Vertex AI integration
 */

# Deploy Cloud Run services
resource "google_cloud_run_service" "services" {
  for_each = var.services
  
  name     = each.value.name
  project  = var.project_id
  location = var.region
  
  template {
    spec {
      service_account_name = var.service_account_id
      containers {
        image = each.value.image
        
        resources {
          limits = {
            cpu    = each.value.cpu
            memory = each.value.memory
          }
        }
        
        # Environment variables
        dynamic "env" {
          for_each = each.value.env_vars != null ? each.value.env_vars : {}
          content {
            name  = env.key
            value = env.value
          }
        }
        
        # Secret environment variables
        dynamic "env" {
          for_each = each.value.secrets != null ? each.value.secrets : {}
          content {
            name = env.key
            value_from {
              secret_key_ref {
                name    = env.value.name
                key     = env.value.version
              }
            }
          }
        }
      }
      
      # Set container concurrency
      container_concurrency = lookup(each.value, "concurrency", 80)
      
      # Set timeout
      timeout_seconds = lookup(each.value, "timeout", 300)
    }
    
    metadata {
      annotations = {
        # Use VPC Connector
        "run.googleapis.com/vpc-access-connector" = var.vpc_connector_id
        
        # Egress settings for the connector
        "run.googleapis.com/vpc-access-egress" = "all-traffic"
        
        # Set minimum and maximum instances
        "autoscaling.knative.dev/minScale" = each.value.min_instances
        "autoscaling.knative.dev/maxScale" = each.value.max_instances
        
        # CPU throttling
        "run.googleapis.com/cpu-throttling" = "false"
      }
    }
  }
  
  # Set traffic to 100% for latest revision
  traffic {
    percent         = 100
    latest_revision = true
  }
  
  # Configure autogenerated revision name
  autogenerate_revision_name = true
}

# Set IAM policy for Cloud Run services
resource "google_cloud_run_service_iam_policy" "service_iam" {
  for_each = var.services
  
  project  = var.project_id
  location = var.region
  service  = google_cloud_run_service.services[each.key].name
  policy_data = each.value.ingress == "internal" ? data.google_iam_policy.internal_only.policy_data : data.google_iam_policy.public.policy_data
}

# IAM policy for services with internal ingress only
data "google_iam_policy" "internal_only" {
  binding {
    role = "roles/run.invoker"
    members = [
      "serviceAccount:${var.service_account_id}",
      "service-${var.project_number}@serverless-robot-prod.iam.gserviceaccount.com"
    ]
  }
}

# IAM policy for services with public ingress
data "google_iam_policy" "public" {
  binding {
    role = "roles/run.invoker"
    members = [
      "allUsers"
    ]
  }
}

# Create domain mappings if provided
resource "google_cloud_run_domain_mapping" "domain_mapping" {
  for_each = {
    for k, v in var.services : k => v
    if lookup(v, "domain", null) != null
  }
  
  name     = each.value.domain
  project  = var.project_id
  location = var.region
  
  metadata {
    namespace = var.project_id
  }
  
  spec {
    route_name = google_cloud_run_service.services[each.key].name
  }
}